{"version":3,"sources":["utils.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getTranscription","currentResult","newChunk","regions","geography","name","key","languages","locale","App","Form","useForm","form","useState","startRecognizeButtonDisabled","setStartRecognizeButtonDisabled","result","setResult","status","setStatus","startRecognition","subscriptionKey","audio","region","console","log","speechConfig","SpeechConfig","fromSubscription","speechRecognitionLanguage","setProperty","PropertyId","SpeechServiceConnection_InitialSilenceTimeoutMs","toString","SpeechServiceConnection_EndSilenceTimeoutMs","start","Date","intermediateResult","audioConfig","AudioConfig","fromWavFileInput","file","recognizer","SpeechRecognizer","recognizing","sender","event","text","recognized","transcription","canceled","reason","CancellationReason","EndOfStream","end","elapsedTime","getTime","toISOString","substr","errorDetails","close","startContinuousRecognitionAsync","err","className","style","textAlign","initialValues","labelCol","span","wrapperCol","Item","label","rules","required","message","type","showSearch","placeholder","map","Option","value","language","ket","accept","multiple","beforeUpload","offset","onClick","a","validateFields","values","disabled","onChange","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.af16ee8e.chunk.js","sourcesContent":["import { RcFile } from \"antd/lib/upload\";\n\nexport type FormOptions = {\n  subscriptionKey: string;\n  region: string;\n  audio: { file: RcFile };\n  locale: string;\n};\n\nexport const colSpan = 20;\nexport const getTranscription = (currentResult: string, newChunk: string) =>\n  currentResult ? `${currentResult}\\r\\n${newChunk}` : newChunk;\n\nexport const regions = [\n  { geography: \"Americas\", name: \"Central US\", key: \"centralus\" },\n  { geography: \"Americas\", name: \"East US\", key: \"eastus\" },\n  { geography: \"Americas\", name: \"East US 2\", key: \"eastus2\" },\n  { geography: \"Americas\", name: \"North Central US\", key: \"northcentralus\" },\n  { geography: \"Americas\", name: \"South Central US\", key: \"southcentralus\" },\n  { geography: \"Americas\", name: \"West Central US\", key: \"westcentralus\" },\n  { geography: \"Americas\", name: \"West US\", key: \"westus\" },\n  { geography: \"Americas\", name: \"West US 2\", key: \"westus2\" },\n  { geography: \"Americas\", name: \"Canada Central\", key: \"canadacentral\" },\n  { geography: \"Americas\", name: \"Brazil South\", key: \"brazilsouth\" },\n  { geography: \"Asia Pacific\", name: \"East Asia\", key: \"eastasia\" },\n  { geography: \"Asia Pacific\", name: \"Southeast Asia\", key: \"southeastasia\" },\n  { geography: \"Asia Pacific\", name: \"Australia East\", key: \"australiaeast\" },\n  { geography: \"Asia Pacific\", name: \"Central India\", key: \"centralindia\" },\n  { geography: \"Asia Pacific\", name: \"Japan East\", key: \"japaneast\" },\n  { geography: \"Asia Pacific\", name: \"Japan West\", key: \"japanwest\" },\n  { geography: \"Asia Pacific\", name: \"Korea Central\", key: \"koreacentral\" },\n  { geography: \"Europe\", name: \"North Europe\", key: \"northeurope\" },\n  { geography: \"Europe\", name: \"West Europe\", key: \"westeurope\" },\n  { geography: \"Europe\", name: \"France Central\", key: \"francecentral\" },\n  { geography: \"Europe\", name: \"UK South\", key: \"uksouth\" },\n];\n\nexport const languages = [\n  { locale: \"ar-AE\", name: \"Arabic (UAE)\" },\n  {\n    name: \"Arabic (Bahrain), modern standard\",\n    locale: \"ar-BH\",\n  },\n  {\n    name: \"Arabic (Egypt)\",\n    locale: \"ar-EG\",\n  },\n  {\n    name: \"Arabic (Israel)\",\n    locale: \"ar-IL\",\n  },\n  {\n    name: \"Arabic (Jordan)\",\n    locale: \"ar-JO\",\n  },\n  {\n    name: \"Arabic (Kuwait)\",\n    locale: \"ar-KW\",\n  },\n  {\n    name: \"Arabic (Lebanon)\",\n    locale: \"ar-LB\",\n  },\n  {\n    name: \"Arabic (Palestine)\",\n    locale: \"ar-PS\",\n  },\n  {\n    name: \"Arabic (Qatar)\",\n    locale: \"ar-QA\",\n  },\n  {\n    name: \"Arabic (Saudi Arabia)\",\n    locale: \"ar-SA\",\n  },\n  {\n    name: \"Arabic (Syria)\",\n    locale: \"ar-SY\",\n  },\n  {\n    name: \"Catalan\",\n    locale: \"ca-ES\",\n  },\n  {\n    name: \"Danish (Denmark)\",\n    locale: \"da-DK\",\n  },\n  {\n    name: \"German (Germany)\",\n    locale: \"de-DE\",\n  },\n  {\n    name: \"English (Australia)\",\n    locale: \"en-AU\",\n  },\n  {\n    name: \"English (Canada)\",\n    locale: \"en-CA\",\n  },\n  {\n    name: \"English (United Kingdom)\",\n    locale: \"en-GB\",\n  },\n  {\n    name: \"English (India)\",\n    locale: \"en-IN\",\n  },\n  {\n    name: \"English (New Zealand)\",\n    locale: \"en-NZ\",\n  },\n  {\n    name: \"English (United States)\",\n    locale: \"en-US\",\n  },\n  {\n    name: \"Spanish (Spain)\",\n    locale: \"es-ES\",\n  },\n  {\n    name: \"Spanish (Mexico)\",\n    locale: \"es-MX\",\n  },\n  {\n    name: \"Finnish (Finland)\",\n    locale: \"fi-FI\",\n  },\n  {\n    name: \"French (Canada)\",\n    locale: \"fr-CA\",\n  },\n  {\n    name: \"French (France)\",\n    locale: \"fr-FR\",\n  },\n  {\n    name: \"Gujarati (Indian)\",\n    locale: \"gu-IN\",\n  },\n  {\n    name: \"Hindi (India)\",\n    locale: \"hi-IN\",\n  },\n  {\n    name: \"Italian (Italy)\",\n    locale: \"it-IT\",\n  },\n  {\n    name: \"Japanese (Japan)\",\n    locale: \"ja-JP\",\n  },\n  {\n    name: \"Korean (Korea)\",\n    locale: \"ko-KR\",\n  },\n  {\n    name: \"Marathi (India)\",\n    locale: \"mr-IN\",\n  },\n  {\n    name: \"Norwegian (Bokmål) (Norway)\",\n    locale: \"nb-NO\",\n  },\n  {\n    name: \"Dutch (Netherlands)\",\n    locale: \"nl-NL\",\n  },\n  {\n    name: \"Polish (Poland)\",\n    locale: \"pl-PL\",\n  },\n  {\n    name: \"Portuguese (Brazil)\",\n    locale: \"pt-BR\",\n  },\n  {\n    name: \"Portuguese (Portugal)\",\n    locale: \"pt-PT\",\n  },\n  {\n    name: \"Russian (Russia)\",\n    locale: \"ru-RU\",\n  },\n  {\n    name: \"Swedish (Sweden)\",\n    locale: \"sv-SE\",\n  },\n  {\n    name: \"Tamil (India)\",\n    locale: \"ta-IN\",\n  },\n  {\n    name: \"Telugu (India)\",\n    locale: \"te-IN\",\n  },\n  {\n    name: \"Thai (Thailand)\",\n    locale: \"th-TH\",\n  },\n  {\n    name: \"Turkish (Turkey)\",\n    locale: \"tr-TR\",\n  },\n  {\n    name: \"Chinese (Mandarin, simplified)\",\n    locale: \"zh-CN\",\n  },\n  {\n    name: \"Chinese (Cantonese, Traditional)\",\n    locale: \"zh-HK\",\n  },\n  {\n    name: \"Chinese (Taiwanese Mandarin)\",\n    locale: \"zh-TW\",\n  },\n];\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {\n  SpeechRecognizer,\n  SpeechConfig,\n  AudioConfig,\n  PropertyId,\n  CancellationReason,\n} from \"microsoft-cognitiveservices-speech-sdk\";\nimport { Input, Form, Upload, Button, Select } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport {\n  languages,\n  regions,\n  colSpan,\n  getTranscription,\n  FormOptions,\n} from \"./utils\";\n\nfunction App() {\n  const [form] = Form.useForm();\n  const [\n    startRecognizeButtonDisabled,\n    setStartRecognizeButtonDisabled,\n  ] = useState(false);\n  const [result, setResult] = useState(\"\");\n  const [status, setStatus] = useState(\"Service ready!\");\n\n  const startRecognition = ({\n    subscriptionKey,\n    audio,\n    locale,\n    region,\n  }: FormOptions) => {\n    console.log({\n      subscriptionKey,\n      audio,\n      locale,\n      region,\n    });\n    setStartRecognizeButtonDisabled(true);\n    setResult(\"\");\n\n    const speechConfig = SpeechConfig.fromSubscription(subscriptionKey, region);\n    speechConfig.speechRecognitionLanguage = locale;\n    speechConfig.setProperty(\n      PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs.toString(),\n      \"20000\"\n    );\n    speechConfig.setProperty(\n      PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs.toString(),\n      \"20000\"\n    );\n\n    const start = new Date();\n    let intermediateResult = \"\";\n\n    const audioConfig = AudioConfig.fromWavFileInput(audio.file);\n    const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\n\n    recognizer.recognizing = (sender, event) => {\n      setStatus(\"Receiving events...\");\n      setResult(getTranscription(intermediateResult, event.result.text));\n    };\n    recognizer.recognized = (sender, event) => {\n      const transcription = getTranscription(\n        intermediateResult,\n        event.result.text\n      );\n      setResult(transcription);\n      intermediateResult = transcription;\n    };\n\n    recognizer.canceled = (sender, event) => {\n      setStartRecognizeButtonDisabled(false);\n\n      if (event.reason === CancellationReason.EndOfStream) {\n        const end = new Date();\n        const elapsedTime = new Date(end.getTime() - start.getTime())\n          .toISOString()\n          .substr(11, 8);\n        setStatus(`Recognition done in ${elapsedTime}`);\n      } else {\n        setStatus(`Error: ${event.errorDetails} ${event.reason}`);\n      }\n\n      recognizer.close();\n    };\n\n    setStatus(\"Starting recognition...\");\n    recognizer.startContinuousRecognitionAsync(\n      () => {\n        setStatus(\"Connected!\");\n      },\n      (err) => {\n        setStartRecognizeButtonDisabled(false);\n        setStatus(`Error: ${err}`);\n\n        recognizer.close();\n      }\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 style={{ textAlign: \"center\" }}>\n        Microsoft Azure - Cognitive Services - Speech To Text\n      </h1>\n      <Form\n        form={form}\n        initialValues={{ locale: \"en-US\" }}\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: colSpan }}\n      >\n        <Form.Item\n          name=\"subscriptionKey\"\n          label=\"Subscription Key\"\n          rules={[\n            {\n              required: true,\n              message: \"Must provide a Cognitive Services subscription key\",\n            },\n          ]}\n        >\n          <Input type=\"text\" />\n        </Form.Item>\n        <Form.Item\n          name=\"region\"\n          label=\"Region\"\n          rules={[\n            {\n              required: true,\n              message: \"Must select a region\",\n            },\n          ]}\n        >\n          <Select showSearch placeholder=\"Select region\">\n            {regions.map((region) => (\n              <Select.Option value={region.key} key={region.key}>\n                {region.geography} - {region.name}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item\n          name=\"locale\"\n          label=\"Language\"\n          rules={[\n            {\n              required: true,\n              message: \"Must select a language\",\n            },\n          ]}\n        >\n          <Select showSearch placeholder=\"Select language\">\n            {languages.map((language) => (\n              <Select.Option value={language.locale} ket={language.locale}>\n                {language.name}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item\n          name=\"audio\"\n          label=\"Audio (16kHz mono)\"\n          rules={[\n            {\n              required: true,\n              message: \"Must upload a .wav audio file 16kHz mono\",\n            },\n          ]}\n        >\n          <Upload\n            accept=\".wav\"\n            multiple={false}\n            beforeUpload={(file) => {\n              return false;\n            }}\n          >\n            <Button>Click to upload</Button>\n          </Upload>\n        </Form.Item>\n        <Form.Item wrapperCol={{ offset: 4, span: colSpan }}>\n          <Button\n            onClick={async () => {\n              try {\n                const values = (await form.validateFields()) as FormOptions;\n                startRecognition(values);\n              } catch (errorInfo) {}\n            }}\n            disabled={startRecognizeButtonDisabled}\n            type=\"primary\"\n          >\n            Start recognition\n          </Button>\n        </Form.Item>\n        <Form.Item wrapperCol={{ offset: 4, span: colSpan }}>\n          {status}\n        </Form.Item>\n        <Form.Item label=\"Results\">\n          <TextArea\n            value={result}\n            onChange={() => {}}\n            style={{ height: 400 }}\n          />\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}